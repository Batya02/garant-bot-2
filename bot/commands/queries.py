from typing import Dict
from asyncio import sleep

from aiogram.types import (CallbackQuery, InlineKeyboardMarkup,
    Message, InlineKeyboardButton
    )
from aiogram.dispatcher.storage import FSMContext

from objects.globals import dp, bot, payment_services, config

from db_models.AuthUser import AuthUser
from db_models.Shops_and_Sales import SAS
from db_models.OutputApplications import OutputApplication

from datetime import datetime as dt
from datetime import timedelta

from telegram_bot_pagination import InlineKeyboardPaginator

from formats.dateTime import datetime_format
from formats.phone import phone_format

from payment_services.QIWI import p2p_wallet

from states.MEM import Mem

from keyboards.keyboards import MENU_BUTTONS

from loguru import logger

@dp.callback_query_handler(lambda query: query.data == "select-payment-service")
async def select_payment_service(query: CallbackQuery):
    payments_services_markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=button, callback_data=f"service_{button}") for button in payment_services]])

    return await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É", reply_markup=payments_services_markup)

@dp.callback_query_handler(lambda query: query.data.startswith(("service")))
async def get_money(query: CallbackQuery):
    
    global SERVICE
    SERVICE = query.data.split("_")[1]

    if SERVICE == "Yoomoney":
        return await query.answer(text="–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")

    await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
        text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")

    await Mem.get_amount_balance_func.set()

@dp.callback_query_handler(lambda query: query.data.startswith(("create-deal")))
async def start_deal(query: CallbackQuery, state: FSMContext):

    await bot.send_message(chat_id=query.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏:")

    await state.update_data(main_user=query.from_user.id)
    await state.update_data(not_main_user=query.data.split("_")[1])

    await Mem.set_deal_amount.set()

@dp.callback_query_handler(lambda query: query.data == "active_shops")
async def active_shops(query: CallbackQuery):
    shops = await SAS.objects.filter(main_user=query.from_user.id, ended=0).all()

    if len(shops) == 0:
        return await bot.send_message(chat_id=query.from_user.id, text="–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

    for shop in shops:

        date = dt.strftime(shop.created, "%Y-%m-%d %H:%M:%S")
        type = "–°–¥–µ–ª–∫–∞" if shop.type == "deal" else "Unknow"

        globals()[f"{shop.id}"] = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"off-deal_{shop.id}")]])

        shop_page = f"ID: <code>{shop.id}</code>\n" +\
        f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <code>{shop.main_user}</code>\n" +\
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {date}\n" +\
        f"–°—É–º–º–∞: {shop.price}\n" +\
        f"–ü—Ä–æ–¥–∞–≤–µ—Ü: <code>{shop.not_main_user}</code>\n" +\
        f"–¢–∏–ø: {type}"

        await bot.send_message(chat_id=query.from_user.id, text=shop_page, 
            reply_markup=globals()[f"{shop.id}"])

    return await bot.send_message(chat_id=query.from_user.id, text=f"–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏: {len(shops)}")

@dp.callback_query_handler(lambda query: query.data.startswith(("active_sales")))
async def active_sales(query: CallbackQuery):
    sales = await SAS.objects.filter(not_main_user=query.from_user.id, ended=0).all()

    if len(sales) == 0:
        return await bot.send_message(query.from_user.id, text="–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

    for sale in sales:

        date = dt.strftime(sale.created, "%Y-%m-%d %H:%M:%S")
        type = "–°–¥–µ–ª–∫–∞" if sale.type == "deal" else "Unknow"

        sale_page = f"ID: <code>{sale.id}</code>\n" +\
        f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <code>{sale.main_user}</code>\n" +\
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {date}\n" +\
        f"–°—É–º–º–∞: {sale.price}\n" +\
        f"–ü—Ä–æ–¥–∞–≤–µ—Ü: <code>{sale.not_main_user}</code>\n" +\
        f"–¢–∏–ø: {type}"

        await bot.send_message(chat_id=query.from_user.id, text=sale_page)

    return await bot.send_message(chat_id=query.from_user.id, text=f"–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂: {len(sales)}")

@dp.message_handler(state=Mem.get_amount_balance_func)
@logger.catch
async def get_amount_balance(message: Message, state: FSMContext):
    await state.finish()
    if not message.text.isdigit():
        return await message.answer(text="–í–≤–æ–¥–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    sum:float = float(message.text) # Get sum value

    if SERVICE == "Qiwi":
        res = p2p_wallet.create_invoice(value=sum, expirationDateTime=datetime_format(dt.now()+timedelta(hours=6)))

        continue_button_payment = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", url=res["payUrl"])]])

        await message.answer(text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã!",
            reply_markup=continue_button_payment)

        billId = res["billId"] # Generate billId

        while True:
            status = p2p_wallet.invoice_status(bill_id=billId)

            if status["status"]["value"] == "PAID":
                update_balance = await AuthUser.objects.get(user_id=message.from_user.id)
                new_balance_value = float(update_balance.balance) + sum

                await update_balance.update(balance=new_balance_value)
                return await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {sum}‚ÇΩ")

            await sleep(5) #Time-out

    elif SERVICE == "Yoomoney":pass

@dp.message_handler(state=Mem.set_deal_amount)
async def set_deal_amount(message: Message, state: FSMContext):

    if message.text.replace(".", "").isdigit() or message.text.isdigit():
        price = float(message.text)
    else:
        return await message.answer(text="–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã: 10 –∏–ª–∏ 10.0")

    user_info = await AuthUser.objects.get(user_id=message.from_user.id)

    if float(user_info.balance) < float(message.text):
        await state.finish()
        return await message.answer(text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")

    data:dict = await state.get_data()
    main_user = data["main_user"]
    not_main_user = data["not_main_user"]
    
    # Create a new deal
    await SAS.objects.create(main_user=main_user, created=dt.now(),
        price=price, not_main_user=not_main_user,
        type="deal", ended="False")

    await message.answer(text="–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

    await state.finish()

@dp.callback_query_handler(lambda query: query.data.startswith(("off-deal")))
async def off_deal(query: CallbackQuery): 
    update_data_deal = await SAS.objects.get(id=int(query.data.split("_")[1]))

    update_data_not_main_user = await AuthUser.objects.get(user_id=int(update_data_deal.not_main_user))
    
    reset_deal_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"reset-deal_{update_data_deal.id}")]
        ])

    new_app_page = f"ID —Å–¥–µ–ª–∫–∏: <code>{update_data_deal.id}</code>\n" +\
    f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏.\n" +\
    f"–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É?"

    await bot.send_message(chat_id=update_data_not_main_user.user_id, text=new_app_page,
        reply_markup=reset_deal_markup)

    await bot.edit_message_text(chat_id = query.from_user.id, message_id = query.message.message_id,
        text = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏.")

@dp.callback_query_handler(lambda query: query.data == "off#deals")
async def off_deals(query: CallbackQuery):

    all_shops = await SAS.objects.filter(main_user=query.from_user.id, ended=True).all()
    all_sales = await SAS.objects.filter(not_main_user=query.from_user.id, ended=True).all()

    type_deal_buttons = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"–ü–æ–∫—É–ø–∫–∏({len(all_shops)})", callback_data="off_shops")],
            [InlineKeyboardButton(text=f"–ü—Ä–æ–¥–∞–∂–∏({len(all_sales)})", callback_data="off_sales")]
        ])

    return await bot.edit_message_text(chat_id=query.from_user.id, message_id=query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø", reply_markup=type_deal_buttons)

@dp.callback_query_handler(lambda query: query.data == "off_shops")
async def all_off_shops(query: CallbackQuery):
    all_shops = await SAS.objects.filter(main_user=query.from_user.id, ended=True).all()

    if len(all_shops) == 0:
        return await bot.edit_message_text(chat_id=query.from_user.id, message_id=query.message.message_id,
            text="–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏!")

    first_shop = all_shops[0]
    created = datetime_format(first_shop.created)
    uncreated = datetime_format(first_shop.uncreated)
    type = "–°–¥–µ–ª–∫–∞" if first_shop.type == "deal" else "Unknow"
    
    global ALL_DEALS
    ALL_DEALS = [id.id for id in all_shops]

    paginator = InlineKeyboardPaginator(page_count=len(ALL_DEALS), current_page=1,
        data_pattern="page_deal#{page}")

    completed_deal_page = f"‚úÖ–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞\n\n" +\
    f"üìçID: {first_shop.id}\n" +\
    f"‚Üí–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <code>{first_shop.main_user}</code>\n" +\
    f"‚è±–°–æ–∑–¥–∞–Ω–æ: <b>{created}</b>\n" +\
    f"üìÖ–ó–∞–≤–µ—Ä—à–µ–Ω–æ: <b>{uncreated}</b>\n" +\
    f"üí∞–°—É–º–º–∞: <code>{first_shop.price}</code>\n" +\
    f"‚Üê–ü—Ä–æ–¥–∞–≤–µ—Ü: <code>{first_shop.not_main_user}</code>\n" +\
    f"üóû–¢–∏–ø: <i>{type}</i>"

    return await bot.send_message(chat_id=query.from_user.id, text=completed_deal_page,
        reply_markup=paginator.markup)

@dp.callback_query_handler(lambda query: query.data == "off_sales")
async def all_off_sales(query: CallbackQuery):

    all_sales = await SAS.objects.filter(not_main_user=query.from_user.id, ended=True).all()

    if len(all_sales) == 0:
        return await bot.edit_message_text(chat_id=query.from_user.id, message_id=query.message.message_id,
            text="–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏!")

    first_sale = all_sales[0]
    created = datetime_format(first_sale.created)
    uncreated = datetime_format(first_sale.uncreated)
    type = "–°–¥–µ–ª–∫–∞" if first_sale.type == "deal" else "Unknow"
    
    global ALL_DEALS
    ALL_DEALS = [id.id for id in all_sales]

    paginator = InlineKeyboardPaginator(page_count=len(ALL_DEALS), current_page=1,
        data_pattern="page_deal#{page}")
    
    completed_deal_page = f"‚úÖ–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞\n\n" +\
    f"üìçID: {first_sale.id}\n" +\
    f"‚Üí–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <code>{first_sale.main_user}</code>\n" +\
    f"‚è±–°–æ–∑–¥–∞–Ω–æ: <b>{created}</b>\n" +\
    f"üìÖ–ó–∞–≤–µ—Ä—à–µ–Ω–æ: <b>{uncreated}</b>\n" +\
    f"üí∞–°—É–º–º–∞: <code>{first_sale.price}</code>\n" +\
    f"‚Üê–ü—Ä–æ–¥–∞–≤–µ—Ü: <code>{first_sale.not_main_user}</code>\n" +\
    f"üóû–¢–∏–ø: <i>{type}</i>"

    return await bot.send_message(chat_id=query.from_user.id, text=completed_deal_page,
        reply_markup=paginator.markup)

@dp.callback_query_handler(lambda query: query.data.startswith(("page_deal")))
async def page_deal(query: CallbackQuery):
    
    deal_data = await SAS.objects.get(id=ALL_DEALS[int(query.data.split("#")[1])-1])
    created = datetime_format(datetime=deal_data.created)
    uncreated = datetime_format(datetime=deal_data.uncreated)
    type = "–°–¥–µ–ª–∫–∞" if deal_data.type == "deal" else "Unknow"

    paginator = InlineKeyboardPaginator(page_count=len(ALL_DEALS), current_page=int(query.data.split("#")[1]),
        data_pattern="page_deal#{page}")

    completed_deal_page = f"‚úÖ–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞\n\n" +\
    f"üìçID: {deal_data.id}\n" +\
    f"‚Üí–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <code>{deal_data.main_user}</code>\n" +\
    f"‚è±–°–æ–∑–¥–∞–Ω–æ: <b>{created}</b>\n" +\
    f"üìÖ–ó–∞–≤–µ—Ä—à–µ–Ω–æ: <b>{uncreated}</b>\n" +\
    f"üí∞–°—É–º–º–∞: <code>{deal_data.price}</code>\n" +\
    f"‚Üê–ü—Ä–æ–¥–∞–≤–µ—Ü: <code>{deal_data.not_main_user}</code>\n" +\
    f"üóû–¢–∏–ø: <i>{type}</i>"

    return await bot.edit_message_text(chat_id=query.message.chat.id, message_id = query.message.message_id,
        text=completed_deal_page, reply_markup=paginator.markup)

@dp.callback_query_handler(lambda query: query.data == "back_menu")
async def back(query: CallbackQuery):

    payments_services_markup = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=button, callback_data=f"service_{button}") for button in payment_services]])

    return await bot.edit_message_text(chat_id=query.message.chat.id, message_id = query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É", reply_markup=payments_services_markup)

@dp.callback_query_handler(lambda query: query.data.startswith(("reset-deal")))
async def reset_deal(query: CallbackQuery, state:FSMContext):
    deal_info = await SAS.objects.get(id=int(query.data.split("_")[1]))
    
    update_data_not_main_user = await AuthUser.objects.get(user_id=deal_info.main_user)

    new_balance_not_main_user:float = float(update_data_not_main_user.balance) - float(deal_info.price)

    if int(new_balance_not_main_user) < 0:
        return await bot.send_message(chat_id=query.from_user.id, text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏, –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç!")

    await update_data_not_main_user.update(balance=new_balance_not_main_user)
    await deal_info.update(uncreated=dt.now(), ended=True)

    update_data_not_main_user = await AuthUser.objects.get(user_id=int(deal_info.not_main_user))
    
    new_balance_not_main_user:float = float(update_data_not_main_user.balance) + float(deal_info.price)
    await update_data_not_main_user.update(balance=new_balance_not_main_user)

    user_ids = []
    user_ids.extend((query.from_user.id, deal_info.main_user))

    for i in user_ids:
        await bot.send_message(chat_id=i, text="‚úÖ–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    await state.finish()

@dp.callback_query_handler(lambda query: query.data == "output-money")
async def output_money(query: CallbackQuery):
    await bot.edit_message_text(chat_id=query.from_user.id, message_id=query.message.message_id,
        text=f"–û—Ç–º–µ–Ω–∏—Ç—å -> /reset\n"
        f"‚ùóÔ∏è–í–∞–∂–Ω–æ: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã(Qiwi):")

    await Mem.get_output_phone_targ.set()

@dp.message_handler(lambda message: message.text not in MENU_BUTTONS, state=Mem.get_output_phone_targ)
async def output_amount_targ(message: Message, state:FSMContext):
    if message.text == "/reset":
        await state.finish()
        return await message.answer(text="–û—Ç–º–µ–Ω–∞")

    await state.update_data(get_output_phone_var=phone_format(message.text))

    await message.answer(text=f"–û—Ç–º–µ–Ω–∏—Ç—å -> /reset\n" f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:")
    await Mem.get_output_amount_targ.set()

@dp.message_handler(lambda message: message.text not in MENU_BUTTONS, state=Mem.get_output_amount_targ)
async def output_amount_targ(message: Message, state:FSMContext):
    if message.text == "/reset":
        await state.finish()
        return await message.answer(text="–û—Ç–º–µ–Ω–∞")

    if message.text.replace(".", "").isdigit() or message.text.isdigit():
        await state.update_data(get_output_amount_var=message.text)
    else:
        return await message.answer(text="–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã: 10 –∏–ª–∏ 10.0")

    user_data = await AuthUser.objects.get(user_id=message.from_user.id)

    get_state_data = await state.get_data()

    amount:str = get_state_data["get_output_amount_var"]

    percent:float = float(amount) * config["percent"] / 100

    if int(float(user_data.balance) - (float(amount)+percent)) < 0:
        return await message.answer(
            text=f"üî¥–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n"
            f"‚ö†Ô∏è–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –∂–µ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /reset")
    
    phone:str  = get_state_data["get_output_phone_var"]
    created:str = dt.strftime(dt.now(), "%Y:%m:%d %H:%M:%S")

    confirm_operation_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm-operation_{message.from_user.id}_{float(amount)+percent}")]
        ])

    app_on_the_withdraw = f"üîî–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥‚û°Ô∏è\n" +\
    f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n" +\
    f"–°—É–º–º–∞ –Ω–∞ –≤—ã–≤–æ–¥: {amount}\n" +\
    f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {created}"

    await bot.send_message(chat_id=config["admin_chat_id"], text=app_on_the_withdraw,
        reply_markup=confirm_operation_markup)

    await message.answer(text="üü¢–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

    await state.finish()

@dp.callback_query_handler(lambda query: query.data.startswith(("confirm-operation")))
async def confirm_operation(query: CallbackQuery):
    get_confirm_data = query.data.split("_")
    get_user_data = await AuthUser.objects.get(user_id=get_confirm_data[1])
    
    new_balance = float(get_user_data.balance) - float(get_confirm_data[2])

    await get_user_data.update(balance=new_balance)

    await OutputApplication.objects.create(user_id=get_confirm_data[1], amount=float(get_confirm_data[2]))

    return await bot.edit_message_text(chat_id=query.from_user.id, message_id=query.message.message_id, 
        text="–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")